include std.size

[Multiplication]
[arg:int part_a]
[arg:int part_b]
[ret:int Product]
sub mul
    over 0 < if 
        rev3 0 rev3
        while clone 0 < do
            rev3 swap clone rev3 swap -
            rev3 ++
        wend
    else
        rev3 0 rev3
        while clone 0 > do
            rev3 swap clone rev3 +
            rev3 --
        wend
    endif
    drop drop
    swap
marine

[Flooring integer division]
[arg:int Dividend]
[arg:int Divisor]
[ret:int Floored result]
sub div_i_f
    rev3 
    1 size_q peek 0 = if 1 60 syscall1 endif

    0 rev3 while 2clone > do
        2clone - 
        rev3 drop swap
        2 size_q peek ++ 2 size_q poke
        swap
    wend
    = if ++ endif
    swap
marine

[Arithmetic modulos]
[arg:int Dividend]
[arg:int Divisor]
[ret:int Remainder]
sub mod
    rev3 swap
    2clone div_i_f
    mul - swap
marine
