include std.io
include std.math
include std.sys.call

sub BLOCK_FREE 0 swap marine
sub BLOCK_USED 1 swap marine

[Modifies the end address of the heap]
[arg:int New address in number of bytes]
[ret:ptr End address of heap]
sub brk
    swap SYS_BRK syscall1 sysread swap
marine

[Read the current end of the heap]
[ret:ptr End address of heap]
sub heap_end
    0 brk swap
marine

[Increases the heap by a set amount of qwords]
[arg:int number of bytes]
[ret:void]
sub incheap
    [16 bytes from the end is where the 0-sized memory block lives]
    [This has to be changed to allow malloc to recognize the new heap memory]
    swap heap_end 16 - over ! 
    heap_end 8 - swap [Store the current end of the heap for later]
    8 mul heap_end + brk 0 < if [sysread with value less than 0 means an error ocurred]
        "Unable to increase heap memory" println
        1 SYS_EXIT syscall1
    endif
    ? heap_end 8 - swap !
marine

sub heap_start
    [The last byte in the heap points to the start of the heap]
    heap_end 8 - ? swap
marine

[Allocates bytes on the heap]
[arg:int number of bytes to allocate]
[ret:ptr address of allocated block]
sub malloc
    swap
    clone 2 mod 1 = if
        "You can't allocate an odd number of bytes" println
        1 SYS_EXIT syscall1
    endif
    heap_start
    while 1 do
        clone ? 1 & BLOCK_FREE != if
            clone ? 18446744073709551614 & over + swap drop [Add the node size to the current node address]
        else
            clone ? 18446744073709551614 &
            swap rev3 2clone > if
                swap drop swap
                clone ? 18446744073709551614 & over + swap drop [Add the node size to the current node address]
            else
                swap drop over swap
                BLOCK_USED + !
                swap return
            endif
        endif
    wend
marine

[Marks an allocated memory block as free]
[arg:ptr pointer to memory block]
[ret:void]
sub free
    swap clone ? BLOCK_USED - !
marine

sub mwalk
    "===Memory Table==================" println
    heap_start
    while 1 do
        "  Visiting node @ " print clone printx
        "    Value: " print clone ? printx
        "    Size:  " print clone ? 18446744073709551614 & printx
        "    Free:  " print clone ? 1 & BLOCK_FREE = if "Yes" println else "No" println endif
        "    Next:  " print clone ? 18446744073709551614 & over + printx
        clone ? 18446744073709551614 & 0 = if
            "=================================" println
            drop return
        endif
        clone ? 18446744073709551614 & over + swap drop
    wend
marine

sub meminit
    "Initializing heap allocator @ " print heap_end printx
    heap_end 32 + brk drop [Allocate 32 bytes on the heap for metadata]
    heap_end 8 - heap_end 32 - ! [Write heap_start to heap_end]
    heap_start 16 BLOCK_USED + !
    heap_start 16 + 0 BLOCK_FREE + !
marine
