import {
    AddInstruction,
    BitwiseAndInstruction,
    BitwiseOrInstruction,
    Clone2Instruction,
    CloneInstruction,
    DecrementInstruction,
    DropInstruction,
    EndIfInstruction,
    EqualityInstruction,
    GreaterThanEqualsInstruction,
    GreaterThanInstruction,
    IncrementInstruction,
    Instruction,
    InterruptInstruction,
    LeftBinaryShiftInstruction,
    LessThanEqualsInstruction,
    LessThanInstruction,
    LoadMemoryInstruction,
    LoadStringBytesInstruction,
    MarineInstruction,
    NotEqualityInstruction,
    OverInstruction,
    PeekInstruction,
    PokeInstruction,
    PushMemoryPointerInstruction,
    PushSyscallReturnValue,
    PutInstruction,
    ReadByteInstruction,
    ReadDWordInstruction,
    ReadQWordInstruction,
    ReadWordInstruction,
    ReturnInstruction,
    Rev3Instruction,
    Rev4Instruction,
    RightBinaryShiftInstruction,
    ShiftDownInstruction,
    ShiftUpInstruction,
    SubtractInstruction,
    SwapInstruction,
    Syscall1Instruction,
    Syscall3Instruction,
    SyscallInstruction,
    UnreferencedDoInstruction,
    UnreferencedElseInstruction,
    UnreferencedIfInstruction,
    UnreferencedNextInstruction,
    UnreferencedSubInstruction,
    UnreferencedUnlessInstruction,
    UnreferencedWendInstruction,
    WhileInstruction,
    WriteByteMemoryInstruction,
    WriteDWordMemoryInstruction,
    WriteMemoryInstruction,
    WriteQWordMemoryInstruction,
    WriteWordMemoryInstruction,
} from "../instruction";

export class InstructionLookupTable {
    protected static instructions_by_symbol: Record<string, new () => Instruction> = {
        "!=": NotEqualityInstruction,
        "&": BitwiseAndInstruction,
        "+": AddInstruction,
        "++": IncrementInstruction,
        "-": SubtractInstruction,
        "--": DecrementInstruction,
        "2clone": Clone2Instruction,
        "<": LessThanInstruction,
        "<<": LeftBinaryShiftInstruction,
        "<=": LessThanEqualsInstruction,
        "=": EqualityInstruction,
        ">": GreaterThanInstruction,
        ">=": GreaterThanEqualsInstruction,
        ">>": RightBinaryShiftInstruction,
        next: UnreferencedNextInstruction,
        return: ReturnInstruction,
        "|": BitwiseOrInstruction,
        clone: CloneInstruction,
        do: UnreferencedDoInstruction,
        drop: DropInstruction,
        else: UnreferencedElseInstruction,
        endif: EndIfInstruction,
        if: UnreferencedIfInstruction,
        int: InterruptInstruction,
        load: LoadMemoryInstruction,
        lodsb: LoadStringBytesInstruction,
        marine: MarineInstruction,
        mem: PushMemoryPointerInstruction,
        over: OverInstruction,
        peek: PeekInstruction,
        poke: PokeInstruction,
        put: PutInstruction,
        readb: ReadByteInstruction,
        readd: ReadDWordInstruction,
        readq: ReadQWordInstruction,
        readw: ReadWordInstruction,
        rev3: Rev3Instruction,
        rev4: Rev4Instruction,
        shiftd: ShiftDownInstruction,
        shiftu: ShiftUpInstruction,
        sub: UnreferencedSubInstruction,
        swap: SwapInstruction,
        syscall1: Syscall1Instruction,
        syscall3: Syscall3Instruction,
        syscall: SyscallInstruction,
        sysread: PushSyscallReturnValue,
        unless: UnreferencedUnlessInstruction,
        wend: UnreferencedWendInstruction,
        while: WhileInstruction,
        write: WriteMemoryInstruction,
        writeb: WriteByteMemoryInstruction,
        writed: WriteDWordMemoryInstruction,
        writeq: WriteQWordMemoryInstruction,
        writew: WriteWordMemoryInstruction,
    };

    public static lookup(instruction_name: string): Instruction | undefined {
        const InstructionConstructor = this.instructions_by_symbol[instruction_name];
        if (!InstructionConstructor) {
            return undefined;
        }
        return new InstructionConstructor();
    }
}
